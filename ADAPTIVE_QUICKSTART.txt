╔══════════════════════════════════════════════════════════════════╗
║          ADAPTIVE LOSS WEIGHTING - QUICK START GUIDE            ║
╚══════════════════════════════════════════════════════════════════╝

┌─ WHAT IS IT? ──────────────────────────────────────────────────┐
│ Automatically balances multiple loss terms (PI losses, RK4)    │
│ during training to improve convergence and performance.        │
│                                                                 │
│ Problem: Different losses have different magnitudes            │
│   L1 = 0.001, L2 = 0.1, L3 = 0.01, L4 = 0.5                   │
│                                                                 │
│ Solution: Adjust weights so all contribute equally             │
│   w1·L1 ≈ w2·L2 ≈ w3·L3 ≈ w4·L4                               │
└─────────────────────────────────────────────────────────────────┘

┌─ STRATEGIES ────────────────────────────────────────────────────┐
│                                                                 │
│ 1. equal_init  [RECOMMENDED]                                   │
│    • Equalizes all losses at epoch 1                           │
│    • Keeps weights fixed after that                            │
│    • Best for: Most problems, stable training                  │
│                                                                 │
│ 2. equal_init_ema                                              │
│    • Equalizes at epoch 1                                      │
│    • Then adapts continuously with EMA                         │
│    • Best for: Changing loss magnitudes                        │
│                                                                 │
│ 3. ema                                                         │
│    • Only uses EMA (no initial equalization)                   │
│    • Best for: When initial weights are good                   │
│                                                                 │
│ 4. fixed                                                       │
│    • Uses config weights (no adaptation)                       │
│    • Best for: Manual control, baselines                       │
└─────────────────────────────────────────────────────────────────┘

┌─ QUICK COMMANDS ────────────────────────────────────────────────┐
│                                                                 │
│ # Use equal initialization (recommended first try)             │
│ python main.py training=adaptive_equal_init                    │
│                                                                 │
│ # Use EMA strategy                                             │
│ python main.py training=adaptive_ema                           │
│                                                                 │
│ # Compare adaptive vs fixed weights                            │
│ python main.py -m training=default,adaptive_equal_init         │
│                                                                 │
│ # Override parameters                                          │
│ python main.py training=adaptive_ema \                         │
│                training.loss.adaptive.ema_alpha=0.95           │
│                                                                 │
│ # Full experiment with all features                            │
│ python main.py model=residual_gcn \                            │
│                training=adaptive_equal_init \                  │
│                dataset.scaling.enabled=true \                  │
│                training.epochs=100                             │
└─────────────────────────────────────────────────────────────────┘

┌─ CONFIGURATION EXAMPLE ─────────────────────────────────────────┐
│                                                                 │
│ # In configs/training/my_training.yaml                         │
│                                                                 │
│ loss:                                                          │
│   w1_PI: 1.0      # Initial weights                           │
│   w2_PI: 1.0                                                   │
│   use_rk4: true                                                │
│   w1_rk4: 1.0                                                  │
│   w2_rk4: 1.0                                                  │
│                                                                 │
│   adaptive:                                                    │
│     enabled: true                                              │
│     strategy: "equal_init"                                     │
│     ema_alpha: 0.9      # EMA coefficient                     │
│     update_frequency: 1 # Update every N epochs               │
└─────────────────────────────────────────────────────────────────┘

┌─ EXPECTED OUTPUT ───────────────────────────────────────────────┐
│                                                                 │
│ Adaptive loss weighting enabled                                │
│ Strategy: equal_init                                           │
│ ================================================               │
│ Equalized weights at epoch 1:                                 │
│   PI_loss1: loss=1.234e-03, weight=8.10e+02, weighted=1.00e+00│
│   PI_loss2: loss=5.678e-02, weight=1.76e+01, weighted=1.00e+00│
│   RK4_loss1: loss=2.345e-03, weight=4.26e+02, weighted=1.00e+00│
│   RK4_loss2: loss=1.234e-01, weight=8.10e+00, weighted=1.00e+00│
│ ================================================               │
│                                                                 │
│ Epoch 001 | Train 2.345e-02 | PI1 1.234e-03 | PI2 5.678e-02...│
│ Epoch 005 | Train 1.234e-02 | PI1 5.678e-04 | PI2 2.345e-02...│
│         Weights: PI1=8.10e+02, PI2=1.76e+01, RK4_1=4.26e+02...│
└─────────────────────────────────────────────────────────────────┘

┌─ KEY PARAMETERS ────────────────────────────────────────────────┐
│                                                                 │
│ ema_alpha (default: 0.9)                                       │
│   • 0.9 = 90% old value, 10% new value                        │
│   • Higher (0.95-0.99) = slower adaptation                     │
│   • Lower (0.7-0.8) = faster response                          │
│                                                                 │
│ update_frequency (default: 1)                                  │
│   • 1 = update every epoch                                     │
│   • 5 = update every 5 epochs (for noisy losses)              │
│                                                                 │
│ Weight bounds                                                  │
│   • min_weight: 1e-4 (prevents zero weights)                  │
│   • max_weight: 1e4 (prevents extreme values)                 │
└─────────────────────────────────────────────────────────────────┘

┌─ TROUBLESHOOTING ───────────────────────────────────────────────┐
│                                                                 │
│ Problem: Training unstable                                     │
│ Solution: Use 'equal_init' (fixed after epoch 1)              │
│           or increase ema_alpha to 0.95                        │
│                                                                 │
│ Problem: Weights too extreme                                   │
│ Solution: Check loss computations, consider data scaling      │
│                                                                 │
│ Problem: No improvement over fixed weights                     │
│ Solution: Fixed weights may already be good, or problem       │
│           doesn't benefit from adaptive weighting             │
└─────────────────────────────────────────────────────────────────┘

┌─ WHEN TO USE ───────────────────────────────────────────────────┐
│                                                                 │
│ ✅ Use adaptive weighting when:                                │
│   • Loss terms have very different magnitudes                 │
│   • You don't know good fixed weights                         │
│   • Training with multiple objectives                          │
│   • One loss dominates the others                             │
│                                                                 │
│ ❌ May not need it when:                                        │
│   • Fixed weights already well-tuned                           │
│   • Loss terms naturally balanced                              │
│   • Single-objective problem                                   │
└─────────────────────────────────────────────────────────────────┘

┌─ BEST PRACTICES ────────────────────────────────────────────────┐
│                                                                 │
│ 1. Start with 'equal_init' strategy                           │
│ 2. Monitor weights in log output                              │
│ 3. Compare with fixed weights baseline                        │
│ 4. Combine with data scaling for best results                 │
│ 5. Use -m flag to compare multiple strategies                 │
└─────────────────────────────────────────────────────────────────┘

┌─ MORE INFO ─────────────────────────────────────────────────────┐
│                                                                 │
│ Full documentation: ADAPTIVE_WEIGHTS_GUIDE.md                  │
│ Configuration: configs/training/adaptive_*.yaml                │
│ Implementation: adaptive_weights.py                            │
│                                                                 │
│ Related features:                                              │
│   • Data scaling: SCALING_GUIDE.md                            │
│   • Residual formulation: RESIDUAL_FORMULATION.md            │
└─────────────────────────────────────────────────────────────────┘

╔══════════════════════════════════════════════════════════════════╗
║  TIP: Try "python main.py training=adaptive_equal_init" first!  ║
╚══════════════════════════════════════════════════════════════════╝
